name: 'publish'

on:
  push:
    branches:
      - main

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'ubuntu-22.04' # for RISC-V support
            args: '--target riscv64gc-unknown-linux-gnu'
            target: 'riscv64gc-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10 # change this to the version you want to use.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Add RISC-V target to the targets list
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.target == 'riscv64gc-unknown-linux-gnu' && 'riscv64gc-unknown-linux-gnu' || '') }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf alsa-utils libasound2-dev openssl pkg-config libssl-dev
          # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.

      - name: install RISC-V cross-compilation tools
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu

      - name: Generate build number
        id: buildnumber
        run: echo "build_number=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate Changelog
        run: echo "Auto Release" > ${{ github.workspace }}-CHANGELOG.txt

      - name: install frontend dependencies
        run: pnpm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Install SQLite (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SQLite environment variables for Windows
          SQLITE3_LIB_DIR: ${{ env.SQLITE3_LIB_DIR }}
          LIBSQLITE3_LINK_LIB: ${{ env.LIBSQLITE3_LINK_LIB }}
          # Set CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER for RISC-V cross-compilation
          CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' && 'riscv64-linux-gnu-gcc' || '' }}
        run: |
          echo "LIBSQLITE3_LINK_LIB=sqlite3" >> $env:GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Set CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER for RISC-V cross-compilation
          CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' && 'riscv64-linux-gnu-gcc' || '' }}
          # Configure pkg-config for cross-compilation
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' && 'true' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' && '/usr/lib/riscv64-linux-gnu/pkgconfig:/usr/share/pkgconfig' || '' }}
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' && '/usr/riscv64-linux-gnu' || '' }}
        with:
          tagName: app-v__VERSION__-beta.${{ steps.buildnumber.outputs.build_number }} # 添加beta标签和构建号
          releaseName: 'App v__VERSION__ Beta (${{ steps.buildnumber.outputs.build_number }})' # 标题包含Beta
          releaseBody: '这是一个Beta版本发布。请下载对应平台的安装包进行爆炸。'
          releaseDraft: false
          prerelease: true # 设置为预发布版本
          args: ${{ matrix.args }}

      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          repository: Horldsence/chat_box_rust
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.GITHUB_TOKEN }}